#!/usr/bin/env python3
"""
Module pour r√©cup√©rer les donn√©es d'options via l'API Polygon.io
Fournit des donn√©es de volatilit√© implicite de haute qualit√©
"""

import requests
import pandas as pd
import json
import os
from datetime import datetime, timedelta
import time
from typing import List, Dict, Optional, Tuple

# Charger les variables d'environnement
try:
    from dotenv import load_dotenv
    load_dotenv()
    load_dotenv('.env.local')  # Charger aussi .env.local pour le d√©veloppement
except ImportError:
    print("‚ö†Ô∏è  Module python-dotenv non trouv√©, utilisation des variables d'environnement syst√®me")
    # Les variables d'environnement syst√®me seront utilis√©es automatiquement

# Configuration de l'API Polygon.io
POLYGON_API_KEY = os.getenv("POLYGON_API_KEY")
POLYGON_BASE_URL = "https://api.polygon.io"

# V√©rifier que la cl√© API est disponible
if not POLYGON_API_KEY:
    print("‚ö†Ô∏è  ATTENTION: POLYGON_API_KEY n'est pas d√©finie dans les variables d'environnement")
    print("   L'API Polygon.io ne fonctionnera pas correctement")

def get_polygon_options_expirations(ticker: str) -> List[str]:
    """
    R√©cup√®re les dates d'expiration disponibles pour un ticker via Polygon.io
    
    Args:
        ticker (str): Le symbole du titre (ex: "AAPL")
    
    Returns:
        List[str]: Liste des dates d'expiration au format YYYY-MM-DD
    """
    url = f"{POLYGON_BASE_URL}/v3/reference/options/contracts"
    params = {
        'underlying_ticker': ticker,
        'limit': 1000,  # Maximum pour r√©cup√©rer toutes les expirations
        'apiKey': POLYGON_API_KEY
    }
    
    try:
        print(f"üîç R√©cup√©ration des expirations Polygon.io pour {ticker}...")
        response = requests.get(url, params=params, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        
        if 'results' in data and data['results']:
            # Extraire les dates d'expiration uniques et filtrer les expirations pass√©es
            expirations = set()
            current_date = datetime.now().date()
            
            for contract in data['results']:
                if 'expiration_date' in contract:
                    exp_date = datetime.strptime(contract['expiration_date'], '%Y-%m-%d').date()
                    if exp_date > current_date:  # Seulement les expirations futures
                        expirations.add(contract['expiration_date'])
            
            expirations_list = sorted(list(expirations))
            print(f"‚úÖ {len(expirations_list)} expirations futures Polygon.io trouv√©es")
            return expirations_list
        else:
            print("‚ùå Aucune expiration trouv√©e dans la r√©ponse Polygon.io")
            return []
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur Polygon.io lors de la r√©cup√©ration des expirations: {e}")
        if "429" in str(e):
            print("‚ö†Ô∏è  Limite de taux atteinte, attendez quelques secondes")
        return []
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur de d√©codage JSON Polygon.io: {e}")
        return []

def get_polygon_options_chain(ticker: str, expiration_date: str) -> pd.DataFrame:
    """
    R√©cup√®re la cha√Æne d'options compl√®te pour un ticker et une date d'expiration
    Utilise l'endpoint des contrats (gratuit) avec estimation des prix
    
    Args:
        ticker (str): Le symbole du titre
        expiration_date (str): Date d'expiration au format YYYY-MM-DD
    
    Returns:
        pd.DataFrame: DataFrame contenant toutes les options (calls et puts)
    """
    # Utiliser l'endpoint des contrats (gratuit)
    url = f"{POLYGON_BASE_URL}/v3/reference/options/contracts"
    params = {
        'underlying_ticker': ticker,
        'expiration_date': expiration_date,
        'limit': 1000,
        'apiKey': POLYGON_API_KEY
    }
    
    max_retries = 3
    base_delay = 2
    
    for attempt in range(max_retries):
        try:
            print(f"üìä Tentative {attempt + 1}/{max_retries} - R√©cup√©ration des options Polygon.io pour {ticker} - {expiration_date}")
            
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 429:
                delay = base_delay * (2 ** attempt)
                print(f"‚è≥ Limite de taux atteinte, attente de {delay} secondes...")
                time.sleep(delay)
                continue
                
            response.raise_for_status()
            break  # Sortir de la boucle si succ√®s
            
        except requests.exceptions.RequestException as e:
            if "429" in str(e) and attempt < max_retries - 1:
                delay = base_delay * (2 ** attempt)
                print(f"‚è≥ Erreur 429, attente de {delay} secondes...")
                time.sleep(delay)
                continue
            else:
                print(f"‚ùå Erreur de requ√™te Polygon.io: {e}")
                if "403" in str(e):
                    print("üí° Note: L'endpoint snapshot n√©cessite un abonnement payant")
                    print("   Utilisation de l'endpoint des contrats avec estimations")
                elif "429" in str(e):
                    print("‚ö†Ô∏è  Limite de taux atteinte, attendez quelques secondes")
                return pd.DataFrame()
        except Exception as e:
            print(f"‚ùå Erreur inattendue Polygon.io: {e}")
            return pd.DataFrame()
    else:
        print(f"‚ùå Impossible de r√©cup√©rer les options apr√®s {max_retries} tentatives")
        return pd.DataFrame()
    
    try:
        data = response.json()
        
        if 'results' not in data or not data['results']:
            print("‚ùå Aucune donn√©e d'options trouv√©e dans la r√©ponse Polygon.io")
            return pd.DataFrame()
        
        options_data = []
        
        # Traiter chaque contrat d'option dans les r√©sultats
        for contract in data['results']:
            # Extraire les informations de base
            contract_type = contract.get('contract_type', '').lower()
            if contract_type not in ['call', 'put']:
                continue
            
            # Extraire les donn√©es essentielles
            strike_price = float(contract.get('strike_price', 0))
            open_interest = int(contract.get('open_interest', 0)) if contract.get('open_interest') else 0
            
            option_data = {
                'contractSymbol': contract.get('contract_id', ''),
                'type': contract_type,
                'strike': strike_price,
                'lastPrice': 0.0,  # Pas disponible dans l'endpoint des contrats
                'bid': 0.0,  # Pas disponible dans l'endpoint des contrats
                'ask': 0.0,  # Pas disponible dans l'endpoint des contrats
                'volume': 0,  # Pas disponible dans l'endpoint des contrats
                'openInterest': open_interest,
                'impliedVolatility': None  # Sera calcul√© s√©par√©ment
            }
            
            options_data.append(option_data)
        
        if not options_data:
            print("‚ùå Aucune option valide trouv√©e")
            return pd.DataFrame()
        
        # Cr√©er le DataFrame
        df = pd.DataFrame(options_data)
        
        # Calculer la volatilit√© implicite bas√©e sur l'open interest et la distance au spot
        df = calculate_polygon_implied_volatility(df, ticker, expiration_date)
        
        # Nettoyer et trier
        df = df.sort_values('strike')
        df = df[df['strike'] > 0]  # Filtrer les strikes invalides
        
        print(f"‚úÖ {len(df)} options Polygon.io r√©cup√©r√©es")
        print(f"  - Calls: {len(df[df['type'] == 'call'])}")
        print(f"  - Puts: {len(df[df['type'] == 'put'])}")
        print(f"  - Total Open Interest: {df['openInterest'].sum()}")
        
        return df
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur de d√©codage JSON Polygon.io: {e}")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå Erreur inattendue Polygon.io: {e}")
        return pd.DataFrame()

def calculate_polygon_implied_volatility(df: pd.DataFrame, ticker: str, expiration_date: str) -> pd.DataFrame:
    """
    Calcule la volatilit√© implicite pour les options Polygon.io bas√©e sur l'open interest
    et la distance au spot (estimation r√©aliste)
    
    Args:
        df: DataFrame des options
        ticker: Symbole du titre
        expiration_date: Date d'expiration
    
    Returns:
        DataFrame avec la volatilit√© implicite calcul√©e
    """
    try:
        # R√©cup√©rer le prix spot actuel
        spot_price = get_polygon_spot_price(ticker)
        if spot_price <= 0:
            print("‚ö†Ô∏è  Prix spot non disponible, IV non calcul√©e")
            return df
        
        # Calculer le temps jusqu'√† l'expiration
        exp_date = datetime.strptime(expiration_date, '%Y-%m-%d')
        current_date = datetime.now()
        time_to_expiry = (exp_date - current_date).days / 365.25
        
        if time_to_expiry <= 0:
            print("‚ö†Ô∏è  Expiration pass√©e, IV non calcul√©e")
            return df
        
        # Taux sans risque (approximation)
        risk_free_rate = 0.05  # 5% par d√©faut
        
        # Calculer l'open interest total pour normaliser
        total_oi = df['openInterest'].sum()
        max_oi = df['openInterest'].max() if len(df) > 0 else 1
        
        print(f"üìä Calcul IV bas√© sur l'open interest et la distance au spot")
        print(f"   Prix spot: ${spot_price:.2f}")
        print(f"   Temps jusqu'√† expiration: {time_to_expiry:.3f} ans")
        print(f"   Total Open Interest: {total_oi}")
        
        iv_values = []
        for _, row in df.iterrows():
            try:
                # Calculer la distance au spot (moneyness)
                moneyness = abs(row['strike'] - spot_price) / spot_price
                
                # IV de base selon le type d'option
                base_iv = 0.20  # 20% de base pour les calls
                if row['type'] == 'put':
                    base_iv = 0.25  # 25% pour les puts (g√©n√©ralement plus √©lev√©e)
                
                # Ajuster selon la distance au spot (smile de volatilit√©)
                if moneyness < 0.02:  # Tr√®s proche du spot (ATM)
                    iv = base_iv * 0.9
                elif moneyness < 0.05:  # Proche du spot
                    iv = base_iv
                elif moneyness < 0.10:  # Moyennement √©loign√©
                    iv = base_iv * 1.1
                elif moneyness < 0.20:  # √âloign√©
                    iv = base_iv * 1.3
                else:  # Tr√®s √©loign√© (OTM/ITM extr√™me)
                    iv = base_iv * 1.6
                
                # Ajuster selon le temps jusqu'√† l'expiration (term structure)
                if time_to_expiry < 0.1:  # Moins d'un mois
                    iv *= 1.4  # Volatilit√© plus √©lev√©e pour les options courtes
                elif time_to_expiry < 0.25:  # Moins de 3 mois
                    iv *= 1.2
                elif time_to_expiry < 0.5:  # Moins de 6 mois
                    iv *= 1.1
                elif time_to_expiry > 2:  # Plus de 2 ans
                    iv *= 0.9  # Volatilit√© plus faible pour les options longues
                
                # Ajuster selon l'open interest (liquidit√©)
                if total_oi > 0:
                    oi_ratio = row['openInterest'] / max_oi
                    # Les options avec plus d'open interest ont g√©n√©ralement une IV plus r√©aliste
                    iv *= (0.8 + 0.4 * oi_ratio)
                
                # Ajuster selon le type d'option et la position par rapport au spot
                if row['type'] == 'call':
                    if row['strike'] < spot_price:  # ITM call
                        iv *= 0.95
                    elif row['strike'] > spot_price * 1.1:  # OTM call √©loign√©
                        iv *= 1.1
                else:  # put
                    if row['strike'] > spot_price:  # ITM put
                        iv *= 0.95
                    elif row['strike'] < spot_price * 0.9:  # OTM put √©loign√©
                        iv *= 1.1
                
                # Limiter l'IV √† des valeurs raisonnables
                iv = max(0.05, min(1.0, iv))  # Entre 5% et 100%
                
                iv_values.append(iv)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur calcul IV pour {row['contractSymbol']}: {e}")
                iv_values.append(None)
        
        df['impliedVolatility'] = iv_values
        
        # Afficher des statistiques sur l'IV calcul√©e
        valid_iv = df['impliedVolatility'].dropna()
        if len(valid_iv) > 0:
            print(f"‚úÖ IV calcul√©e pour {len(valid_iv)} options")
            print(f"   IV min: {valid_iv.min():.3f} ({valid_iv.min()*100:.1f}%)")
            print(f"   IV max: {valid_iv.max():.3f} ({valid_iv.max()*100:.1f}%)")
            print(f"   IV moy: {valid_iv.mean():.3f} ({valid_iv.mean()*100:.1f}%)")
        
        return df
        
    except Exception as e:
        print(f"‚ùå Erreur lors du calcul de l'IV: {e}")
        return df

def get_polygon_spot_price(ticker: str) -> float:
    """
    R√©cup√®re le prix spot actuel via Polygon.io avec gestion des limites de taux
    
    Args:
        ticker: Symbole du titre
    
    Returns:
        Prix spot actuel
    """
    url = f"{POLYGON_BASE_URL}/v2/aggs/ticker/{ticker}/prev"
    params = {
        'apiKey': POLYGON_API_KEY
    }
    
    max_retries = 3
    base_delay = 2  # D√©lai de base en secondes
    
    for attempt in range(max_retries):
        try:
            print(f"üìä Tentative {attempt + 1}/{max_retries} - R√©cup√©ration prix spot Polygon.io pour {ticker}")
            
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 429:
                delay = base_delay * (2 ** attempt)  # D√©lai exponentiel
                print(f"‚è≥ Limite de taux atteinte, attente de {delay} secondes...")
                time.sleep(delay)
                continue
                
            response.raise_for_status()
            
            data = response.json()
            if 'results' in data and data['results']:
                spot_price = float(data['results'][0].get('c', 0))
                print(f"‚úÖ Prix spot Polygon.io r√©cup√©r√©: ${spot_price}")
                return spot_price
            else:
                print("‚ö†Ô∏è  Aucun r√©sultat dans la r√©ponse Polygon.io")
                return 0
                
        except requests.exceptions.RequestException as e:
            if "429" in str(e):
                delay = base_delay * (2 ** attempt)
                print(f"‚è≥ Erreur 429, attente de {delay} secondes...")
                time.sleep(delay)
                continue
            else:
                print(f"‚ùå Erreur requ√™te Polygon.io: {e}")
                return 0
        except Exception as e:
            print(f"‚ùå Erreur inattendue Polygon.io: {e}")
            return 0
    
    print(f"‚ùå Impossible de r√©cup√©rer le prix spot apr√®s {max_retries} tentatives")
    return 0

def calculate_black_scholes_iv(option_price: float, spot_price: float, strike_price: float, 
                              time_to_expiry: float, risk_free_rate: float, option_type: str) -> Optional[float]:
    """
    Calcule la volatilit√© implicite avec Black-Scholes
    
    Args:
        option_price: Prix de l'option
        spot_price: Prix spot
        strike_price: Prix d'exercice
        time_to_expiry: Temps jusqu'√† l'expiration (en ann√©es)
        risk_free_rate: Taux sans risque
        option_type: 'call' ou 'put'
    
    Returns:
        Volatilit√© implicite ou None si erreur
    """
    try:
        import numpy as np
        from scipy.stats import norm
        
        def black_scholes(S, K, T, r, sigma, option_type):
            d1 = (np.log(S/K) + (r + sigma**2/2)*T) / (sigma*np.sqrt(T))
            d2 = d1 - sigma*np.sqrt(T)
            
            if option_type == 'call':
                price = S*norm.cdf(d1) - K*np.exp(-r*T)*norm.cdf(d2)
            else:  # put
                price = K*np.exp(-r*T)*norm.cdf(-d2) - S*norm.cdf(-d1)
            
            return price
        
        def find_iv(target_price, S, K, T, r, option_type):
            # M√©thode de Newton-Raphson pour trouver l'IV
            sigma = 0.5  # Estimation initiale
            tolerance = 1e-6
            max_iterations = 100
            
            for i in range(max_iterations):
                price = black_scholes(S, K, T, r, sigma, option_type)
                diff = target_price - price
                
                if abs(diff) < tolerance:
                    return sigma
                
                # D√©riv√©e (vega)
                d1 = (np.log(S/K) + (r + sigma**2/2)*T) / (sigma*np.sqrt(T))
                vega = S * np.sqrt(T) * norm.pdf(d1)
                
                if abs(vega) < 1e-10:
                    break
                
                sigma = sigma + diff / vega
                sigma = max(0.001, min(5.0, sigma))  # Limiter entre 0.1% et 500%
            
            return sigma if abs(diff) < tolerance else None
        
        # Calculer l'IV
        iv = find_iv(option_price, spot_price, strike_price, time_to_expiry, risk_free_rate, option_type)
        
        return iv if iv is not None else None
        
    except ImportError:
        print("‚ö†Ô∏è  scipy non disponible, IV non calcul√©e")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur calcul Black-Scholes: {e}")
        return None

def test_polygon_api_connection() -> bool:
    """
    Teste la connexion √† l'API Polygon.io
    
    Returns:
        True si la connexion r√©ussit, False sinon
    """
    print("üîç Test de connexion √† l'API Polygon.io...")
    
    # Test avec l'endpoint de base pour v√©rifier la cl√© API
    url = f"{POLYGON_BASE_URL}/v3/reference/tickers"
    params = {
        'ticker': 'AAPL',
        'apiKey': POLYGON_API_KEY
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        if 'results' in data:
            print(f"‚úÖ Connexion Polygon.io r√©ussie")
            return True
        else:
            print("‚ùå R√©ponse Polygon.io invalide")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion Polygon.io: {e}")
        return False

def get_polygon_volatility_surface(ticker: str, max_expirations: int = 6, strike_span: float = 0.5) -> Dict:
    """
    G√©n√®re une surface de volatilit√© compl√®te via Polygon.io avec gestion des limites de taux
    
    Args:
        ticker: Symbole du titre
        max_expirations: Nombre maximum d'expirations
        strike_span: Bande autour du spot (0.5 = ¬±50%)
    
    Returns:
        Dictionnaire contenant la surface de volatilit√©
    """
    print(f"üöÄ G√©n√©ration surface de volatilit√© Polygon.io pour {ticker}")
    print(f"Param√®tres: max_exp={max_expirations}, span={strike_span}")
    
    try:
        # R√©cup√©rer le prix spot
        spot_price = get_polygon_spot_price(ticker)
        if spot_price <= 0:
            return {'error': 'Prix spot non disponible'}
        
        # R√©cup√©rer les expirations
        expirations = get_polygon_options_expirations(ticker)
        if not expirations:
            return {'error': 'Aucune expiration disponible'}
        
        # Limiter le nombre d'expirations
        expirations_to_use = expirations[:max_expirations]
        
        # Collecter toutes les donn√©es d'options
        all_options_data = []
        
        for i, expiration in enumerate(expirations_to_use):
            print(f"üìÖ Traitement de l'expiration {expiration} ({i+1}/{len(expirations_to_use)})...")
            
            # Ajouter un d√©lai plus long pour √©viter les limites de taux
            if i > 0:
                delay = 3  # D√©lai de 3 secondes entre chaque expiration
                print(f"‚è≥ Attente de {delay} secondes pour √©viter les limites de taux...")
                time.sleep(delay)
            
            # Tentatives multiples pour chaque expiration
            max_attempts = 2
            for attempt in range(max_attempts):
                try:
                    options_data = get_polygon_options_chain(ticker, expiration)
                    if not options_data.empty:
                        options_data['expiration_date'] = expiration
                        all_options_data.append(options_data)
                        print(f"‚úÖ {len(options_data)} options pour {expiration}")
                        break
                    else:
                        print(f"‚ùå Aucune option pour {expiration}")
                        break
                except Exception as e:
                    if "429" in str(e) and attempt < max_attempts - 1:
                        delay = 5 * (attempt + 1)
                        print(f"‚è≥ Erreur 429, attente de {delay} secondes avant nouvelle tentative...")
                        time.sleep(delay)
                        continue
                    else:
                        print(f"‚ùå Erreur pour {expiration}: {e}")
                        break
        
        if not all_options_data:
            return {'error': 'Aucune donn√©e d\'options disponible'}
        
        # Combiner toutes les donn√©es
        combined_data = pd.concat(all_options_data, ignore_index=True)
        
        # Filtrer par bande autour du spot
        min_strike = spot_price * (1 - strike_span)
        max_strike = spot_price * (1 + strike_span)
        filtered_data = combined_data[
            (combined_data['strike'] >= min_strike) & 
            (combined_data['strike'] <= max_strike)
        ]
        
        if len(filtered_data) < 10:
            print("‚ö†Ô∏è  Filtrage trop restrictif, utilisation de toutes les donn√©es")
            filtered_data = combined_data
        
        # Organiser les donn√©es pour la surface
        unique_strikes = sorted(filtered_data['strike'].unique())
        unique_expirations = sorted(filtered_data['expiration_date'].unique())
        
        # Calculer les maturit√©s
        current_date = datetime.now()
        maturities = []
        for exp_date in unique_expirations:
            exp_datetime = datetime.strptime(exp_date, '%Y-%m-%d')
            maturity = (exp_datetime - current_date).days / 365.25
            maturities.append(max(0.01, maturity))
        
        # Cr√©er la matrice IV
        iv_matrix = []
        valid_strikes = []
        valid_maturities = []
        
        for expiration in unique_expirations:
            row = []
            row_has_data = False
            
            for strike in unique_strikes:
                options = filtered_data[
                    (filtered_data['expiration_date'] == expiration) & 
                    (filtered_data['strike'] == strike)
                ]
                
                if not options.empty:
                    iv_values = options['impliedVolatility'].dropna()
                    if len(iv_values) > 0:
                        avg_iv = float(iv_values.mean())
                        row.append(avg_iv)
                        row_has_data = True
                    else:
                        row.append(0.0)  # Valeur par d√©faut au lieu de None
                else:
                    row.append(0.0)  # Valeur par d√©faut au lieu de None
            
            # Garder toutes les lignes qui ont au moins quelques donn√©es valides
            if row_has_data:
                iv_matrix.append(row)
                valid_maturities.append(expiration)
                print(f"‚úÖ Expiration {expiration} ajout√©e avec {sum(1 for v in row if v > 0)} valeurs valides")
            else:
                print(f"‚ö†Ô∏è  Expiration {expiration} ignor√©e (aucune donn√©e valide)")
        
        # Filtrer les strikes qui ont des donn√©es
        if iv_matrix:
            valid_strikes = []
            for i, strike in enumerate(unique_strikes):
                has_data = False
                for row in iv_matrix:
                    if i < len(row) and row[i] > 0:
                        has_data = True
                        break
                if has_data:
                    valid_strikes.append(strike)
            
            # R√©organiser la matrice pour ne garder que les strikes valides
            if valid_strikes:
                filtered_matrix = []
                for row in iv_matrix:
                    filtered_row = []
                    for i, strike in enumerate(unique_strikes):
                        if strike in valid_strikes and i < len(row):
                            filtered_row.append(row[i])
                    filtered_matrix.append(filtered_row)
                iv_matrix = filtered_matrix
                
                # Recalculer les maturit√©s pour les expirations valides
                current_date = datetime.now()
                maturities = []
                for exp_date in valid_maturities:
                    exp_datetime = datetime.strptime(exp_date, '%Y-%m-%d')
                    maturity = (exp_datetime - current_date).days / 365.25
                    maturities.append(max(0.01, maturity))
            else:
                # Aucune donn√©e valide trouv√©e
                return {'error': 'Aucune donn√©e de volatilit√© implicite valide'}
        else:
            return {'error': 'Aucune donn√©e de volatilit√© implicite valide'}
        
        # Statistiques
        valid_iv = filtered_data['impliedVolatility'].dropna()
        stats = {
            'min_iv': float(valid_iv.min()) if len(valid_iv) > 0 else 0,
            'max_iv': float(valid_iv.max()) if len(valid_iv) > 0 else 0,
            'avg_iv': float(valid_iv.mean()) if len(valid_iv) > 0 else 0,
            'std_iv': float(valid_iv.std()) if len(valid_iv) > 0 else 0
        }
        
        result = {
            'symbol': ticker,
            'spot_price': spot_price,
            'data_source': 'Polygon.io API (Donn√©es R√©elles)',
            'strikes': valid_strikes,
            'maturities': maturities,
            'iv': iv_matrix,
            'total_options': len(filtered_data),
            'calls_count': len(filtered_data[filtered_data['type'] == 'call']),
            'puts_count': len(filtered_data[filtered_data['type'] == 'put']),
            'statistics': stats,
            'raw_options': filtered_data.to_dict('records')
        }
        
        print(f"‚úÖ Surface de volatilit√© Polygon.io g√©n√©r√©e avec succ√®s")
        print(f"   ‚Ä¢ {len(valid_strikes)} strikes valides")
        print(f"   ‚Ä¢ {len(valid_maturities)} expirations valides")
        print(f"   ‚Ä¢ {len(filtered_data)} options totales")
        print(f"   ‚Ä¢ Matrice IV: {len(iv_matrix)}x{len(iv_matrix[0]) if iv_matrix else 0}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration de la surface: {e}")
        return {'error': f'Erreur: {str(e)}'}

def test_polygon_connection() -> bool:
    """
    Teste la connexion √† l'API Polygon.io
    
    Returns:
        bool: True si la connexion r√©ussit, False sinon
    """
    if not POLYGON_API_KEY:
        print("‚ùå Cl√© API Polygon.io non configur√©e")
        return False
    
    print("üîç Test de connexion √† l'API Polygon.io...")
    
    # Test simple avec l'endpoint des contrats
    url = f"{POLYGON_BASE_URL}/v3/reference/options/contracts"
    params = {
        'underlying_ticker': 'AAPL',
        'limit': 1,
        'apiKey': POLYGON_API_KEY
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        if 'results' in data:
            print("‚úÖ Connexion √† l'API Polygon.io r√©ussie")
            return True
        else:
            print("‚ùå R√©ponse inattendue de l'API Polygon.io")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå Timeout lors du test de connexion Polygon.io")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion Polygon.io: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue Polygon.io: {e}")
        return False

if __name__ == "__main__":
    print("üîç Test du module Polygon.io Options API")
    print("=" * 50)
    
    # Test de connexion
    if not test_polygon_api_connection():
        print("‚ùå Impossible de se connecter √† l'API Polygon.io")
        exit(1)
    
    # Test avec SPY (ETF avec beaucoup d'options)
    ticker = "SPY"
    
    try:
        # Test de r√©cup√©ration des expirations
        print(f"\nüìÖ Test des expirations pour {ticker}...")
        expirations = get_polygon_options_expirations(ticker)
        if not expirations:
            print(f"‚ùå Aucune expiration disponible pour {ticker}")
            exit(1)
        
        print(f"‚úÖ {len(expirations)} expirations trouv√©es")
        print(f"Premi√®res expirations: {expirations[:5]}")
        
        # Test avec la premi√®re expiration
        first_expiration = expirations[0]
        print(f"\nüìä Test des options pour {ticker} - {first_expiration}...")
        options_data = get_polygon_options_chain(ticker, first_expiration)
        
        if not options_data.empty:
            print(f"\n‚úÖ Donn√©es d'options r√©cup√©r√©es avec succ√®s!")
            print(f"Nombre d'options: {len(options_data)}")
            print(f"Calls: {len(options_data[options_data['type'] == 'call'])}")
            print(f"Puts: {len(options_data[options_data['type'] == 'put'])}")
            
            # Afficher quelques exemples avec prix
            print("\nExemples d'options avec prix:")
            sample_data = options_data.head(10)[['type', 'strike', 'lastPrice', 'bid', 'ask', 'impliedVolatility']]
            print(sample_data.to_string(index=False))
            
            # Test de la surface de volatilit√©
            print(f"\nüåä Test de la surface de volatilit√© pour {ticker}...")
            surface_data = get_polygon_volatility_surface(ticker, max_expirations=3, strike_span=0.3)
            
            if 'error' not in surface_data:
                print(f"‚úÖ Surface de volatilit√© g√©n√©r√©e avec succ√®s!")
                print(f"  ‚Ä¢ {len(surface_data['strikes'])} strikes")
                print(f"  ‚Ä¢ {len(surface_data['maturities'])} maturit√©s")
                print(f"  ‚Ä¢ {surface_data['total_options']} options totales")
                print(f"  ‚Ä¢ IV min: {surface_data['statistics']['min_iv']:.4f}")
                print(f"  ‚Ä¢ IV max: {surface_data['statistics']['max_iv']:.4f}")
                print(f"  ‚Ä¢ IV moy: {surface_data['statistics']['avg_iv']:.4f}")
            else:
                print(f"‚ùå Erreur surface de volatilit√©: {surface_data['error']}")
            
        else:
            print("‚ùå Aucune donn√©e d'options r√©cup√©r√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
