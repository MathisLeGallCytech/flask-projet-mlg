#!/usr/bin/env python3
"""
Script final pour extraire la volatilit√© implicite des options
Utilise Yahoo Finance avec fallback vers des donn√©es simul√©es
"""

import pandas as pd
import numpy as np
import time


def create_simulated_options_data(ticker: str, expiration: str):
    """
    Cr√©e des donn√©es d'options simul√©es pour tester la logique
    """
    # Prix actuel simul√©
    current_price = 150.0
    
    # Cr√©er des strikes autour du prix actuel
    strikes = np.arange(current_price - 20, current_price + 21, 5)
    
    # Cr√©er des donn√©es pour les calls
    calls_data = []
    for strike in strikes:
        # Volatilit√© implicite simul√©e (plus √©lev√©e pour les strikes √©loign√©s)
        moneyness = abs(current_price - strike) / current_price
        implied_vol = 0.2 + 0.1 * moneyness + np.random.normal(0, 0.02)
        implied_vol = max(0.05, min(0.5, implied_vol))  # Limiter entre 5% et 50%
        
        # Prix simul√© bas√© sur le mod√®le Black-Scholes simplifi√©
        if strike < current_price:
            # In-the-money call
            intrinsic_value = current_price - strike
            time_value = 5.0 + np.random.normal(0, 1)
            last_price = max(intrinsic_value + time_value, 0.01)
        else:
            # Out-of-the-money call
            time_value = max(0.01, 10.0 * np.exp(-(strike - current_price) / 10))
            last_price = time_value
        
        calls_data.append({
            'contractSymbol': f'{ticker}{expiration.replace("-", "")}C{int(strike)}',
            'strike': strike,
            'lastPrice': round(last_price, 2),
            'impliedVolatility': round(implied_vol, 4)
        })
    
    # Cr√©er des donn√©es pour les puts
    puts_data = []
    for strike in strikes:
        # Volatilit√© implicite simul√©e
        moneyness = abs(current_price - strike) / current_price
        implied_vol = 0.25 + 0.15 * moneyness + np.random.normal(0, 0.02)
        implied_vol = max(0.05, min(0.6, implied_vol))  # Limiter entre 5% et 60%
        
        # Prix simul√©
        if strike > current_price:
            # In-the-money put
            intrinsic_value = strike - current_price
            time_value = 5.0 + np.random.normal(0, 1)
            last_price = max(intrinsic_value + time_value, 0.01)
        else:
            # Out-of-the-money put
            time_value = max(0.01, 8.0 * np.exp(-(current_price - strike) / 10))
            last_price = time_value
        
        puts_data.append({
            'contractSymbol': f'{ticker}{expiration.replace("-", "")}P{int(strike)}',
            'strike': strike,
            'lastPrice': round(last_price, 2),
            'impliedVolatility': round(implied_vol, 4)
        })
    
    return pd.DataFrame(calls_data), pd.DataFrame(puts_data)


def get_implied_volatility(ticker: str, expiration: str, force_simulated=False):
    """
    R√©cup√®re la volatilit√© implicite des options pour un ticker et une date d'expiration donn√©s.
    
    Args:
        ticker (str): Le symbole du titre (ex: "AAPL")
        expiration (str): La date d'expiration des options (ex: "2024-01-19")
        force_simulated (bool): Si True, force l'utilisation de donn√©es simul√©es
    
    Returns:
        pd.DataFrame: DataFrame contenant les donn√©es de volatilit√© implicite
    """
    
    if not force_simulated:
        # Essayer d'abord avec les vraies donn√©es Yahoo Finance
        try:
            import yfinance as yf
            
            print(f"Tentative de r√©cup√©ration des vraies donn√©es pour {ticker} - expiration: {expiration}")
            
            # Cr√©er un objet Ticker
            ticker_obj = yf.Ticker(ticker)
            
            # Ajouter un d√©lai pour √©viter les probl√®mes de rate limiting
            time.sleep(1)
            
            # R√©cup√©rer la cha√Æne d'options
            options_chain = ticker_obj.option_chain(expiration)
            
            print(f"‚úÖ Donn√©es r√©elles r√©cup√©r√©es avec succ√®s")
            print(f"  - Calls: {len(options_chain.calls)} contrats")
            print(f"  - Puts: {len(options_chain.puts)} contrats")
            
            # Extraire les calls et puts
            calls = options_chain.calls
            puts = options_chain.puts
            
            # V√©rifier si les colonnes n√©cessaires existent
            required_columns = ["contractSymbol", "strike", "lastPrice", "impliedVolatility"]
            
            if not all(col in calls.columns for col in required_columns):
                print("‚ö†Ô∏è Colonnes manquantes dans les calls, utilisation de donn√©es simul√©es")
                raise Exception("Colonnes manquantes")
            
            if not all(col in puts.columns for col in required_columns):
                print("‚ö†Ô∏è Colonnes manquantes dans les puts, utilisation de donn√©es simul√©es")
                raise Exception("Colonnes manquantes")
            
            # S√©lectionner uniquement les colonnes n√©cessaires pour les calls
            calls_filtered = calls[required_columns].copy()
            calls_filtered['type'] = 'call'
            
            # S√©lectionner uniquement les colonnes n√©cessaires pour les puts
            puts_filtered = puts[required_columns].copy()
            puts_filtered['type'] = 'put'
            
            # Remplacer les valeurs NaN par 0 dans impliedVolatility
            calls_filtered['impliedVolatility'] = calls_filtered['impliedVolatility'].fillna(0)
            puts_filtered['impliedVolatility'] = puts_filtered['impliedVolatility'].fillna(0)
            
            # Concat√©ner les deux DataFrames
            combined_df = pd.concat([calls_filtered, puts_filtered], ignore_index=True)
            
            # Trier par strike croissant
            combined_df = combined_df.sort_values('strike')
            
            print(f"‚úÖ DataFrame final cr√©√© avec {len(combined_df)} lignes (donn√©es r√©elles)")
            
            return combined_df
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es r√©elles: {e}")
            print("üîÑ Basculement vers les donn√©es simul√©es...")
    
    # Utiliser des donn√©es simul√©es
    print(f"Utilisation de donn√©es simul√©es pour {ticker} - expiration: {expiration}")
    
    # Cr√©er des donn√©es simul√©es
    calls, puts = create_simulated_options_data(ticker, expiration)
    
    print(f"Donn√©es simul√©es cr√©√©es:")
    print(f"  - Calls: {len(calls)} contrats")
    print(f"  - Puts: {len(puts)} contrats")
    
    # Ajouter la colonne type
    calls['type'] = 'call'
    puts['type'] = 'put'
    
    # Concat√©ner les deux DataFrames
    combined_df = pd.concat([calls, puts], ignore_index=True)
    
    # Trier par strike croissant
    combined_df = combined_df.sort_values('strike')
    
    print(f"‚úÖ DataFrame final cr√©√© avec {len(combined_df)} lignes (donn√©es simul√©es)")
    
    return combined_df


def get_available_expirations(ticker: str):
    """
    R√©cup√®re les dates d'expiration disponibles pour un ticker
    """
    try:
        import yfinance as yf
        
        ticker_obj = yf.Ticker(ticker)
        time.sleep(1)  # D√©lai pour √©viter le rate limiting
        
        expirations = ticker_obj.options
        if expirations:
            return expirations
        else:
            # Retourner des dates simul√©es si aucune n'est disponible
            return ["2024-01-19", "2024-02-16", "2024-03-15"]
            
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des expirations: {e}")
        # Retourner des dates simul√©es
        return ["2024-01-19", "2024-02-16", "2024-03-15"]


if __name__ == "__main__":
    # Exemple d'utilisation
    ticker = "AAPL"
    
    print("üîç Extraction de volatilit√© implicite des options")
    print("=" * 60)
    
    try:
        # R√©cup√©rer les dates d'expiration disponibles
        available_expirations = get_available_expirations(ticker)
        
        if available_expirations:
            first_expiration = available_expirations[0]
            print(f"Ticker: {ticker}")
            print(f"Date d'expiration utilis√©e: {first_expiration}")
            print("-" * 50)
            
            # R√©cup√©rer la volatilit√© implicite
            volatility_data = get_implied_volatility(ticker, first_expiration)
            
            if not volatility_data.empty:
                print(f"\n‚úÖ Donn√©es de volatilit√© implicite r√©cup√©r√©es avec succ√®s!")
                
                # Afficher les donn√©es
                print("\nDonn√©es de volatilit√© implicite (premi√®res 10 lignes):")
                print(volatility_data.head(10))
                
                print(f"\nStatistiques:")
                print(f"Nombre total d'options: {len(volatility_data)}")
                print(f"Nombre de calls: {len(volatility_data[volatility_data['type'] == 'call'])}")
                print(f"Nombre de puts: {len(volatility_data[volatility_data['type'] == 'put'])}")
                
                # Statistiques de volatilit√© implicite
                print(f"\nStatistiques de volatilit√© implicite:")
                print(f"Min: {volatility_data['impliedVolatility'].min():.4f}")
                print(f"Max: {volatility_data['impliedVolatility'].max():.4f}")
                print(f"Moyenne: {volatility_data['impliedVolatility'].mean():.4f}")
                print(f"√âcart-type: {volatility_data['impliedVolatility'].std():.4f}")
                
                # Afficher quelques exemples par type
                calls_data = volatility_data[volatility_data['type'] == 'call']
                puts_data = volatility_data[volatility_data['type'] == 'put']
                
                print(f"\nExemples de calls:")
                print(calls_data.head(5)[['strike', 'lastPrice', 'impliedVolatility']])
                
                print(f"\nExemples de puts:")
                print(puts_data.head(5)[['strike', 'lastPrice', 'impliedVolatility']])
                
            else:
                print("‚ùå Aucune donn√©e de volatilit√© implicite trouv√©e.")
        else:
            print(f"‚ùå Aucune date d'expiration disponible pour {ticker}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        import traceback
        traceback.print_exc()


